import os
import sys
import pytest

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))


@pytest.fixture
def valid_expressions():
    # Примеры корректных выражений (должны работать без ошибок)
    return {
        "простое_сложение": "2 + 2",
        "смешанные_операции": "3 + 4 * 2 / (1 - 5)^2",
        "целочисленное_деление": "10 : 3",
        "вещественные_числа": "5.5 * 2.2 + 1",
        "длинное_выражение": "1 + 2 - 3 * 4 / 5 ^ 2 + (6 - 7)",
        "унарный_минус": "-5 + 3",
        "вложенные_скобки": "((2 + 3) * (4 - (1 + 1)))"
    }


@pytest.fixture
def invalid_expressions():
    # Примеры неправильных выражений (должны вызывать ошибки)
    return {
        "пустое": "",
        "два_оператора_подряд": "3 + * 2",
        "два_числа_подряд": "3 4 +",
        "несбалансированные_скобки": "(3 + 2",
        "недопустимый_символ": "2 + 3$",
        "начинается_с_оператора": "+ 3 5",
        "заканчивается_оператором": "3 + 4 *",
        "некорректное_вещественное": "3..4 + 2",
        "пропущен_операнд": "5 +",
        "неверное_расположение_скобок": "2 (3 + 4)",
        "много_точек": "4.5.2 + 1",
        "пустые_скобки": "() + 2",
    }


@pytest.fixture
def tokenized_expression():
    # Пример выражения, уже разделённого на токены
    return ['3', '+', '4', '*', '2', '/', '(', '1', '-', '5', ')', '^', '2']


@pytest.fixture
def postfix_expression():
    # То же выражение, но записанное в обратной польской нотации (для калькулятора)
    return ['3', '4', '2', '*', '1', '5', '-', '2', '^', '/', '+']
